syntax = "proto3";

import "google/protobuf/empty.proto";

service Seal {
    // Setup the remote server by initializing the oram blocks.
    rpc setup (SetupMessage) returns (google.protobuf.Empty) {}

    rpc search(SearchMessage) returns (SearchResponse) {}

    /**
     * @deprecated.
     */
    rpc oram_access(OramAccessMessage) returns (OramAccessResponse) {}

    // Init the oram block.
    rpc oram_init(OramInitMessage) returns (google.protobuf.Empty) {}

    rpc read_bucket(BucketReadMessage) returns (BucketReadResponse) {}

    rpc write_bucket(BucketWriteMessage) returns (google.protobuf.Empty) {}

    rpc set_capacity(BucketSetMessage) returns (google.protobuf.Empty) {}
}

/*
    The setup message will also tell the server to generate a random engine; 
    since the random engine is given by the local one.
*/
message SetupMessage
{
    int32 bucket_size = 1;
    int32 block_number = 2;
    int32 block_size = 3;
    int32 oram_block_size = 4;
    // bytes random_engine = 5;
}

/* Not used */
message SearchMessage
{
    bytes buffer = 1;
}

/* Not used*/
message SearchResponse
{
    bytes buffer = 1;
}

message OramAccessMessage
{
    bool operation = 1;
    bool is_odict = 2;
    bytes buffer = 3;
    int32 oram_id = 4;
    int32 id = 5; // The address to be accessed
}

message OramAccessResponse
{
    bytes buffer = 1;
}

message OramInitMessage
{
    int32 oram_id = 1;
    int32 block_size = 2;
}

message OdictInitMessage
{
    int32 block_size = 1;
}

message BucketReadMessage
{
    bool is_odict = 1;
    int32 position = 2;
    int32 oram_id = 3;
}

message BucketReadResponse
{
    bytes buffer = 1;
}

message BucketWriteMessage
{
    bool is_odict = 1;
    int32 position = 2;
    bytes buffer = 3;
    int32 oram_id = 4;
}

message BucketSetMessage
{
    bool is_odict = 1;
    int32 number_of_buckets = 2;
    int32 oram_id = 3;
}