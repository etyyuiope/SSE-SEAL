// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: seal.proto

#include "proto/seal.pb.h"
#include "proto/seal.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Seal_method_names[] = {
  "/Seal/setup",
  "/Seal/search",
  "/Seal/insert",
  "/Seal/oram_access",
};

std::unique_ptr< Seal::Stub> Seal::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Seal::Stub> stub(new Seal::Stub(channel, options));
  return stub;
}

Seal::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_setup_(Seal_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_search_(Seal_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_insert_(Seal_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_oram_access_(Seal_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Seal::Stub::setup(::grpc::ClientContext* context, const ::SetupMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SetupMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setup_, context, request, response);
}

void Seal::Stub::experimental_async::setup(::grpc::ClientContext* context, const ::SetupMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SetupMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setup_, context, request, response, std::move(f));
}

void Seal::Stub::experimental_async::setup(::grpc::ClientContext* context, const ::SetupMessage* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Seal::Stub::PrepareAsyncsetupRaw(::grpc::ClientContext* context, const ::SetupMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::SetupMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Seal::Stub::AsyncsetupRaw(::grpc::ClientContext* context, const ::SetupMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Seal::Stub::search(::grpc::ClientContext* context, const ::SearchMessage& request, ::SearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SearchMessage, ::SearchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_search_, context, request, response);
}

void Seal::Stub::experimental_async::search(::grpc::ClientContext* context, const ::SearchMessage* request, ::SearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SearchMessage, ::SearchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, std::move(f));
}

void Seal::Stub::experimental_async::search(::grpc::ClientContext* context, const ::SearchMessage* request, ::SearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SearchResponse>* Seal::Stub::PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::SearchMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SearchResponse, ::SearchMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_search_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SearchResponse>* Seal::Stub::AsyncsearchRaw(::grpc::ClientContext* context, const ::SearchMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsearchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Seal::Stub::insert(::grpc::ClientContext* context, const ::InsertMessage& request, ::InsertResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::InsertMessage, ::InsertResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_insert_, context, request, response);
}

void Seal::Stub::experimental_async::insert(::grpc::ClientContext* context, const ::InsertMessage* request, ::InsertResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::InsertMessage, ::InsertResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_insert_, context, request, response, std::move(f));
}

void Seal::Stub::experimental_async::insert(::grpc::ClientContext* context, const ::InsertMessage* request, ::InsertResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_insert_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InsertResponse>* Seal::Stub::PrepareAsyncinsertRaw(::grpc::ClientContext* context, const ::InsertMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::InsertResponse, ::InsertMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_insert_, context, request);
}

::grpc::ClientAsyncResponseReader< ::InsertResponse>* Seal::Stub::AsyncinsertRaw(::grpc::ClientContext* context, const ::InsertMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinsertRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Seal::Stub::oram_access(::grpc::ClientContext* context, const ::OramAccessMessage& request, ::OramAccessResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::OramAccessMessage, ::OramAccessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_oram_access_, context, request, response);
}

void Seal::Stub::experimental_async::oram_access(::grpc::ClientContext* context, const ::OramAccessMessage* request, ::OramAccessResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::OramAccessMessage, ::OramAccessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_oram_access_, context, request, response, std::move(f));
}

void Seal::Stub::experimental_async::oram_access(::grpc::ClientContext* context, const ::OramAccessMessage* request, ::OramAccessResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_oram_access_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OramAccessResponse>* Seal::Stub::PrepareAsyncoram_accessRaw(::grpc::ClientContext* context, const ::OramAccessMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::OramAccessResponse, ::OramAccessMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_oram_access_, context, request);
}

::grpc::ClientAsyncResponseReader< ::OramAccessResponse>* Seal::Stub::Asyncoram_accessRaw(::grpc::ClientContext* context, const ::OramAccessMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncoram_accessRaw(context, request, cq);
  result->StartCall();
  return result;
}

Seal::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Seal_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Seal::Service, ::SetupMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Seal::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SetupMessage* req,
             ::google::protobuf::Empty* resp) {
               return service->setup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Seal_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Seal::Service, ::SearchMessage, ::SearchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Seal::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SearchMessage* req,
             ::SearchResponse* resp) {
               return service->search(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Seal_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Seal::Service, ::InsertMessage, ::InsertResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Seal::Service* service,
             ::grpc::ServerContext* ctx,
             const ::InsertMessage* req,
             ::InsertResponse* resp) {
               return service->insert(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Seal_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Seal::Service, ::OramAccessMessage, ::OramAccessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Seal::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OramAccessMessage* req,
             ::OramAccessResponse* resp) {
               return service->oram_access(ctx, req, resp);
             }, this)));
}

Seal::Service::~Service() {
}

::grpc::Status Seal::Service::setup(::grpc::ServerContext* context, const ::SetupMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Seal::Service::search(::grpc::ServerContext* context, const ::SearchMessage* request, ::SearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Seal::Service::insert(::grpc::ServerContext* context, const ::InsertMessage* request, ::InsertResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Seal::Service::oram_access(::grpc::ServerContext* context, const ::OramAccessMessage* request, ::OramAccessResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


