// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: seal.proto

#include "proto/seal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr SetupMessage::SetupMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bucket_size_(0)
  , block_number_(0)
  , block_size_(0)
  , oram_block_size_(0){}
struct SetupMessageDefaultTypeInternal {
  constexpr SetupMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetupMessageDefaultTypeInternal() {}
  union {
    SetupMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetupMessageDefaultTypeInternal _SetupMessage_default_instance_;
constexpr SearchMessage::SearchMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buffer_(){}
struct SearchMessageDefaultTypeInternal {
  constexpr SearchMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SearchMessageDefaultTypeInternal() {}
  union {
    SearchMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SearchMessageDefaultTypeInternal _SearchMessage_default_instance_;
constexpr SearchResponse::SearchResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buffer_(){}
struct SearchResponseDefaultTypeInternal {
  constexpr SearchResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SearchResponseDefaultTypeInternal() {}
  union {
    SearchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
constexpr OramAccessMessage::OramAccessMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buffer_()
  , operation_(false)
  , is_odict_(false)
  , oram_id_(0){}
struct OramAccessMessageDefaultTypeInternal {
  constexpr OramAccessMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OramAccessMessageDefaultTypeInternal() {}
  union {
    OramAccessMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OramAccessMessageDefaultTypeInternal _OramAccessMessage_default_instance_;
constexpr OramAccessResponse::OramAccessResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buffer_(){}
struct OramAccessResponseDefaultTypeInternal {
  constexpr OramAccessResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OramAccessResponseDefaultTypeInternal() {}
  union {
    OramAccessResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OramAccessResponseDefaultTypeInternal _OramAccessResponse_default_instance_;
constexpr OramInitMessage::OramInitMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : oram_id_(0)
  , block_size_(0){}
struct OramInitMessageDefaultTypeInternal {
  constexpr OramInitMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OramInitMessageDefaultTypeInternal() {}
  union {
    OramInitMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OramInitMessageDefaultTypeInternal _OramInitMessage_default_instance_;
constexpr OdictInitMessage::OdictInitMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_size_(0){}
struct OdictInitMessageDefaultTypeInternal {
  constexpr OdictInitMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OdictInitMessageDefaultTypeInternal() {}
  union {
    OdictInitMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OdictInitMessageDefaultTypeInternal _OdictInitMessage_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_seal_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_seal_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_seal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_seal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetupMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetupMessage, bucket_size_),
  PROTOBUF_FIELD_OFFSET(::SetupMessage, block_number_),
  PROTOBUF_FIELD_OFFSET(::SetupMessage, block_size_),
  PROTOBUF_FIELD_OFFSET(::SetupMessage, oram_block_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SearchMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SearchMessage, buffer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SearchResponse, buffer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OramAccessMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OramAccessMessage, operation_),
  PROTOBUF_FIELD_OFFSET(::OramAccessMessage, is_odict_),
  PROTOBUF_FIELD_OFFSET(::OramAccessMessage, buffer_),
  PROTOBUF_FIELD_OFFSET(::OramAccessMessage, oram_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OramAccessResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OramAccessResponse, buffer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OramInitMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OramInitMessage, oram_id_),
  PROTOBUF_FIELD_OFFSET(::OramInitMessage, block_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OdictInitMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OdictInitMessage, block_size_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SetupMessage)},
  { 9, -1, sizeof(::SearchMessage)},
  { 15, -1, sizeof(::SearchResponse)},
  { 21, -1, sizeof(::OramAccessMessage)},
  { 30, -1, sizeof(::OramAccessResponse)},
  { 36, -1, sizeof(::OramInitMessage)},
  { 43, -1, sizeof(::OdictInitMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetupMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SearchMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SearchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OramAccessMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OramAccessResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OramInitMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OdictInitMessage_default_instance_),
};

const char descriptor_table_protodef_seal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nseal.proto\032\033google/protobuf/empty.prot"
  "o\"f\n\014SetupMessage\022\023\n\013bucket_size\030\001 \001(\005\022\024"
  "\n\014block_number\030\002 \001(\005\022\022\n\nblock_size\030\003 \001(\005"
  "\022\027\n\017oram_block_size\030\004 \001(\005\"\037\n\rSearchMessa"
  "ge\022\016\n\006buffer\030\001 \003(\014\" \n\016SearchResponse\022\016\n\006"
  "buffer\030\001 \003(\014\"Y\n\021OramAccessMessage\022\021\n\tope"
  "ration\030\001 \001(\010\022\020\n\010is_odict\030\002 \001(\010\022\016\n\006buffer"
  "\030\003 \003(\014\022\017\n\007oram_id\030\004 \001(\005\"$\n\022OramAccessRes"
  "ponse\022\016\n\006buffer\030\001 \003(\014\"6\n\017OramInitMessage"
  "\022\017\n\007oram_id\030\001 \001(\005\022\022\n\nblock_size\030\002 \001(\005\"&\n"
  "\020OdictInitMessage\022\022\n\nblock_size\030\001 \001(\0052\330\001"
  "\n\004Seal\0220\n\005setup\022\r.SetupMessage\032\026.google."
  "protobuf.Empty\"\000\022+\n\006search\022\016.SearchMessa"
  "ge\032\017.SearchResponse\"\000\0228\n\013oram_access\022\022.O"
  "ramAccessMessage\032\023.OramAccessResponse\"\000\022"
  "7\n\toram_init\022\020.OramInitMessage\032\026.google."
  "protobuf.Empty\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_seal_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_seal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_seal_2eproto = {
  false, false, 664, descriptor_table_protodef_seal_2eproto, "seal.proto", 
  &descriptor_table_seal_2eproto_once, descriptor_table_seal_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_seal_2eproto::offsets,
  file_level_metadata_seal_2eproto, file_level_enum_descriptors_seal_2eproto, file_level_service_descriptors_seal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_seal_2eproto_getter() {
  return &descriptor_table_seal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_seal_2eproto(&descriptor_table_seal_2eproto);

// ===================================================================

class SetupMessage::_Internal {
 public:
};

SetupMessage::SetupMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SetupMessage)
}
SetupMessage::SetupMessage(const SetupMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bucket_size_, &from.bucket_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&oram_block_size_) -
    reinterpret_cast<char*>(&bucket_size_)) + sizeof(oram_block_size_));
  // @@protoc_insertion_point(copy_constructor:SetupMessage)
}

inline void SetupMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bucket_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oram_block_size_) -
    reinterpret_cast<char*>(&bucket_size_)) + sizeof(oram_block_size_));
}

SetupMessage::~SetupMessage() {
  // @@protoc_insertion_point(destructor:SetupMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetupMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetupMessage::ArenaDtor(void* object) {
  SetupMessage* _this = reinterpret_cast< SetupMessage* >(object);
  (void)_this;
}
void SetupMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetupMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetupMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SetupMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bucket_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oram_block_size_) -
      reinterpret_cast<char*>(&bucket_size_)) + sizeof(oram_block_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 bucket_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bucket_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 block_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 block_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 oram_block_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          oram_block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetupMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetupMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bucket_size = 1;
  if (this->_internal_bucket_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bucket_size(), target);
  }

  // int32 block_number = 2;
  if (this->_internal_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_block_number(), target);
  }

  // int32 block_size = 3;
  if (this->_internal_block_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_block_size(), target);
  }

  // int32 oram_block_size = 4;
  if (this->_internal_oram_block_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_oram_block_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetupMessage)
  return target;
}

size_t SetupMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetupMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 bucket_size = 1;
  if (this->_internal_bucket_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bucket_size());
  }

  // int32 block_number = 2;
  if (this->_internal_block_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_block_number());
  }

  // int32 block_size = 3;
  if (this->_internal_block_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_block_size());
  }

  // int32 oram_block_size = 4;
  if (this->_internal_oram_block_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oram_block_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetupMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupMessage::GetClassData() const { return &_class_data_; }

void SetupMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetupMessage *>(to)->MergeFrom(
      static_cast<const SetupMessage &>(from));
}


void SetupMessage::MergeFrom(const SetupMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetupMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bucket_size() != 0) {
    _internal_set_bucket_size(from._internal_bucket_size());
  }
  if (from._internal_block_number() != 0) {
    _internal_set_block_number(from._internal_block_number());
  }
  if (from._internal_block_size() != 0) {
    _internal_set_block_size(from._internal_block_size());
  }
  if (from._internal_oram_block_size() != 0) {
    _internal_set_oram_block_size(from._internal_oram_block_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupMessage::CopyFrom(const SetupMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetupMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupMessage::IsInitialized() const {
  return true;
}

void SetupMessage::InternalSwap(SetupMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetupMessage, oram_block_size_)
      + sizeof(SetupMessage::oram_block_size_)
      - PROTOBUF_FIELD_OFFSET(SetupMessage, bucket_size_)>(
          reinterpret_cast<char*>(&bucket_size_),
          reinterpret_cast<char*>(&other->bucket_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_seal_2eproto_getter, &descriptor_table_seal_2eproto_once,
      file_level_metadata_seal_2eproto[0]);
}

// ===================================================================

class SearchMessage::_Internal {
 public:
};

SearchMessage::SearchMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  buffer_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SearchMessage)
}
SearchMessage::SearchMessage(const SearchMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buffer_(from.buffer_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SearchMessage)
}

inline void SearchMessage::SharedCtor() {
}

SearchMessage::~SearchMessage() {
  // @@protoc_insertion_point(destructor:SearchMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SearchMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SearchMessage::ArenaDtor(void* object) {
  SearchMessage* _this = reinterpret_cast< SearchMessage* >(object);
  (void)_this;
}
void SearchMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SearchMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SearchMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes buffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_buffer();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SearchMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes buffer = 1;
  for (int i = 0, n = this->_internal_buffer_size(); i < n; i++) {
    const auto& s = this->_internal_buffer(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SearchMessage)
  return target;
}

size_t SearchMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SearchMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes buffer = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(buffer_.size());
  for (int i = 0, n = buffer_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      buffer_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SearchMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchMessage::GetClassData() const { return &_class_data_; }

void SearchMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SearchMessage *>(to)->MergeFrom(
      static_cast<const SearchMessage &>(from));
}


void SearchMessage::MergeFrom(const SearchMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SearchMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buffer_.MergeFrom(from.buffer_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchMessage::CopyFrom(const SearchMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SearchMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchMessage::IsInitialized() const {
  return true;
}

void SearchMessage::InternalSwap(SearchMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  buffer_.InternalSwap(&other->buffer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_seal_2eproto_getter, &descriptor_table_seal_2eproto_once,
      file_level_metadata_seal_2eproto[1]);
}

// ===================================================================

class SearchResponse::_Internal {
 public:
};

SearchResponse::SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  buffer_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SearchResponse)
}
SearchResponse::SearchResponse(const SearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buffer_(from.buffer_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SearchResponse)
}

inline void SearchResponse::SharedCtor() {
}

SearchResponse::~SearchResponse() {
  // @@protoc_insertion_point(destructor:SearchResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SearchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SearchResponse::ArenaDtor(void* object) {
  SearchResponse* _this = reinterpret_cast< SearchResponse* >(object);
  (void)_this;
}
void SearchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SearchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes buffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_buffer();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SearchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes buffer = 1;
  for (int i = 0, n = this->_internal_buffer_size(); i < n; i++) {
    const auto& s = this->_internal_buffer(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SearchResponse)
  return target;
}

size_t SearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SearchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes buffer = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(buffer_.size());
  for (int i = 0, n = buffer_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      buffer_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SearchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchResponse::GetClassData() const { return &_class_data_; }

void SearchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SearchResponse *>(to)->MergeFrom(
      static_cast<const SearchResponse &>(from));
}


void SearchResponse::MergeFrom(const SearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buffer_.MergeFrom(from.buffer_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchResponse::CopyFrom(const SearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResponse::IsInitialized() const {
  return true;
}

void SearchResponse::InternalSwap(SearchResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  buffer_.InternalSwap(&other->buffer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_seal_2eproto_getter, &descriptor_table_seal_2eproto_once,
      file_level_metadata_seal_2eproto[2]);
}

// ===================================================================

class OramAccessMessage::_Internal {
 public:
};

OramAccessMessage::OramAccessMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  buffer_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:OramAccessMessage)
}
OramAccessMessage::OramAccessMessage(const OramAccessMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buffer_(from.buffer_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&operation_, &from.operation_,
    static_cast<size_t>(reinterpret_cast<char*>(&oram_id_) -
    reinterpret_cast<char*>(&operation_)) + sizeof(oram_id_));
  // @@protoc_insertion_point(copy_constructor:OramAccessMessage)
}

inline void OramAccessMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&operation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oram_id_) -
    reinterpret_cast<char*>(&operation_)) + sizeof(oram_id_));
}

OramAccessMessage::~OramAccessMessage() {
  // @@protoc_insertion_point(destructor:OramAccessMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OramAccessMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OramAccessMessage::ArenaDtor(void* object) {
  OramAccessMessage* _this = reinterpret_cast< OramAccessMessage* >(object);
  (void)_this;
}
void OramAccessMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OramAccessMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OramAccessMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:OramAccessMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_.Clear();
  ::memset(&operation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oram_id_) -
      reinterpret_cast<char*>(&operation_)) + sizeof(oram_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OramAccessMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          operation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_odict = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_odict_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes buffer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_buffer();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 oram_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          oram_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OramAccessMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OramAccessMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool operation = 1;
  if (this->_internal_operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_operation(), target);
  }

  // bool is_odict = 2;
  if (this->_internal_is_odict() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_odict(), target);
  }

  // repeated bytes buffer = 3;
  for (int i = 0, n = this->_internal_buffer_size(); i < n; i++) {
    const auto& s = this->_internal_buffer(i);
    target = stream->WriteBytes(3, s, target);
  }

  // int32 oram_id = 4;
  if (this->_internal_oram_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_oram_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OramAccessMessage)
  return target;
}

size_t OramAccessMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OramAccessMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes buffer = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(buffer_.size());
  for (int i = 0, n = buffer_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      buffer_.Get(i));
  }

  // bool operation = 1;
  if (this->_internal_operation() != 0) {
    total_size += 1 + 1;
  }

  // bool is_odict = 2;
  if (this->_internal_is_odict() != 0) {
    total_size += 1 + 1;
  }

  // int32 oram_id = 4;
  if (this->_internal_oram_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oram_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OramAccessMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OramAccessMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OramAccessMessage::GetClassData() const { return &_class_data_; }

void OramAccessMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OramAccessMessage *>(to)->MergeFrom(
      static_cast<const OramAccessMessage &>(from));
}


void OramAccessMessage::MergeFrom(const OramAccessMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OramAccessMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buffer_.MergeFrom(from.buffer_);
  if (from._internal_operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
  if (from._internal_is_odict() != 0) {
    _internal_set_is_odict(from._internal_is_odict());
  }
  if (from._internal_oram_id() != 0) {
    _internal_set_oram_id(from._internal_oram_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OramAccessMessage::CopyFrom(const OramAccessMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OramAccessMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OramAccessMessage::IsInitialized() const {
  return true;
}

void OramAccessMessage::InternalSwap(OramAccessMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  buffer_.InternalSwap(&other->buffer_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OramAccessMessage, oram_id_)
      + sizeof(OramAccessMessage::oram_id_)
      - PROTOBUF_FIELD_OFFSET(OramAccessMessage, operation_)>(
          reinterpret_cast<char*>(&operation_),
          reinterpret_cast<char*>(&other->operation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OramAccessMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_seal_2eproto_getter, &descriptor_table_seal_2eproto_once,
      file_level_metadata_seal_2eproto[3]);
}

// ===================================================================

class OramAccessResponse::_Internal {
 public:
};

OramAccessResponse::OramAccessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  buffer_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:OramAccessResponse)
}
OramAccessResponse::OramAccessResponse(const OramAccessResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buffer_(from.buffer_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OramAccessResponse)
}

inline void OramAccessResponse::SharedCtor() {
}

OramAccessResponse::~OramAccessResponse() {
  // @@protoc_insertion_point(destructor:OramAccessResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OramAccessResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OramAccessResponse::ArenaDtor(void* object) {
  OramAccessResponse* _this = reinterpret_cast< OramAccessResponse* >(object);
  (void)_this;
}
void OramAccessResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OramAccessResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OramAccessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:OramAccessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OramAccessResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes buffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_buffer();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OramAccessResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OramAccessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes buffer = 1;
  for (int i = 0, n = this->_internal_buffer_size(); i < n; i++) {
    const auto& s = this->_internal_buffer(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OramAccessResponse)
  return target;
}

size_t OramAccessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OramAccessResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes buffer = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(buffer_.size());
  for (int i = 0, n = buffer_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      buffer_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OramAccessResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OramAccessResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OramAccessResponse::GetClassData() const { return &_class_data_; }

void OramAccessResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OramAccessResponse *>(to)->MergeFrom(
      static_cast<const OramAccessResponse &>(from));
}


void OramAccessResponse::MergeFrom(const OramAccessResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OramAccessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buffer_.MergeFrom(from.buffer_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OramAccessResponse::CopyFrom(const OramAccessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OramAccessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OramAccessResponse::IsInitialized() const {
  return true;
}

void OramAccessResponse::InternalSwap(OramAccessResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  buffer_.InternalSwap(&other->buffer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OramAccessResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_seal_2eproto_getter, &descriptor_table_seal_2eproto_once,
      file_level_metadata_seal_2eproto[4]);
}

// ===================================================================

class OramInitMessage::_Internal {
 public:
};

OramInitMessage::OramInitMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:OramInitMessage)
}
OramInitMessage::OramInitMessage(const OramInitMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&oram_id_, &from.oram_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_size_) -
    reinterpret_cast<char*>(&oram_id_)) + sizeof(block_size_));
  // @@protoc_insertion_point(copy_constructor:OramInitMessage)
}

inline void OramInitMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&oram_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&block_size_) -
    reinterpret_cast<char*>(&oram_id_)) + sizeof(block_size_));
}

OramInitMessage::~OramInitMessage() {
  // @@protoc_insertion_point(destructor:OramInitMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OramInitMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OramInitMessage::ArenaDtor(void* object) {
  OramInitMessage* _this = reinterpret_cast< OramInitMessage* >(object);
  (void)_this;
}
void OramInitMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OramInitMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OramInitMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:OramInitMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&oram_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_size_) -
      reinterpret_cast<char*>(&oram_id_)) + sizeof(block_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OramInitMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 oram_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          oram_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 block_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OramInitMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OramInitMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 oram_id = 1;
  if (this->_internal_oram_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_oram_id(), target);
  }

  // int32 block_size = 2;
  if (this->_internal_block_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_block_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OramInitMessage)
  return target;
}

size_t OramInitMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OramInitMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 oram_id = 1;
  if (this->_internal_oram_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oram_id());
  }

  // int32 block_size = 2;
  if (this->_internal_block_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_block_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OramInitMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OramInitMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OramInitMessage::GetClassData() const { return &_class_data_; }

void OramInitMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OramInitMessage *>(to)->MergeFrom(
      static_cast<const OramInitMessage &>(from));
}


void OramInitMessage::MergeFrom(const OramInitMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OramInitMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_oram_id() != 0) {
    _internal_set_oram_id(from._internal_oram_id());
  }
  if (from._internal_block_size() != 0) {
    _internal_set_block_size(from._internal_block_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OramInitMessage::CopyFrom(const OramInitMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OramInitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OramInitMessage::IsInitialized() const {
  return true;
}

void OramInitMessage::InternalSwap(OramInitMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OramInitMessage, block_size_)
      + sizeof(OramInitMessage::block_size_)
      - PROTOBUF_FIELD_OFFSET(OramInitMessage, oram_id_)>(
          reinterpret_cast<char*>(&oram_id_),
          reinterpret_cast<char*>(&other->oram_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OramInitMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_seal_2eproto_getter, &descriptor_table_seal_2eproto_once,
      file_level_metadata_seal_2eproto[5]);
}

// ===================================================================

class OdictInitMessage::_Internal {
 public:
};

OdictInitMessage::OdictInitMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:OdictInitMessage)
}
OdictInitMessage::OdictInitMessage(const OdictInitMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_size_ = from.block_size_;
  // @@protoc_insertion_point(copy_constructor:OdictInitMessage)
}

inline void OdictInitMessage::SharedCtor() {
block_size_ = 0;
}

OdictInitMessage::~OdictInitMessage() {
  // @@protoc_insertion_point(destructor:OdictInitMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OdictInitMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OdictInitMessage::ArenaDtor(void* object) {
  OdictInitMessage* _this = reinterpret_cast< OdictInitMessage* >(object);
  (void)_this;
}
void OdictInitMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OdictInitMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OdictInitMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:OdictInitMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OdictInitMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 block_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OdictInitMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OdictInitMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 block_size = 1;
  if (this->_internal_block_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_block_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OdictInitMessage)
  return target;
}

size_t OdictInitMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OdictInitMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 block_size = 1;
  if (this->_internal_block_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_block_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OdictInitMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OdictInitMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OdictInitMessage::GetClassData() const { return &_class_data_; }

void OdictInitMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OdictInitMessage *>(to)->MergeFrom(
      static_cast<const OdictInitMessage &>(from));
}


void OdictInitMessage::MergeFrom(const OdictInitMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OdictInitMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_block_size() != 0) {
    _internal_set_block_size(from._internal_block_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OdictInitMessage::CopyFrom(const OdictInitMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OdictInitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdictInitMessage::IsInitialized() const {
  return true;
}

void OdictInitMessage::InternalSwap(OdictInitMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(block_size_, other->block_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OdictInitMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_seal_2eproto_getter, &descriptor_table_seal_2eproto_once,
      file_level_metadata_seal_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SetupMessage* Arena::CreateMaybeMessage< ::SetupMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetupMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::SearchMessage* Arena::CreateMaybeMessage< ::SearchMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SearchMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::SearchResponse* Arena::CreateMaybeMessage< ::SearchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::OramAccessMessage* Arena::CreateMaybeMessage< ::OramAccessMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OramAccessMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::OramAccessResponse* Arena::CreateMaybeMessage< ::OramAccessResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OramAccessResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::OramInitMessage* Arena::CreateMaybeMessage< ::OramInitMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OramInitMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::OdictInitMessage* Arena::CreateMaybeMessage< ::OdictInitMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OdictInitMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
