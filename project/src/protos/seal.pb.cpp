// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: seal.proto

#include "seal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr SetupMessage::SetupMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_names_()
  , connection_information_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetupMessageDefaultTypeInternal {
  constexpr SetupMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetupMessageDefaultTypeInternal() {}
  union {
    SetupMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetupMessageDefaultTypeInternal _SetupMessage_default_instance_;
constexpr BucketReadMessage::BucketReadMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_odict_(false)
  , position_(0)
  , oram_id_(0){}
struct BucketReadMessageDefaultTypeInternal {
  constexpr BucketReadMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BucketReadMessageDefaultTypeInternal() {}
  union {
    BucketReadMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BucketReadMessageDefaultTypeInternal _BucketReadMessage_default_instance_;
constexpr BucketReadResponse::BucketReadResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BucketReadResponseDefaultTypeInternal {
  constexpr BucketReadResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BucketReadResponseDefaultTypeInternal() {}
  union {
    BucketReadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BucketReadResponseDefaultTypeInternal _BucketReadResponse_default_instance_;
constexpr BucketWriteMessage::BucketWriteMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_odict_(false)
  , position_(0)
  , oram_id_(0){}
struct BucketWriteMessageDefaultTypeInternal {
  constexpr BucketWriteMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BucketWriteMessageDefaultTypeInternal() {}
  union {
    BucketWriteMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BucketWriteMessageDefaultTypeInternal _BucketWriteMessage_default_instance_;
constexpr BucketSetMessage::BucketSetMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_odict_(false)
  , number_of_buckets_(0)
  , oram_id_(0){}
struct BucketSetMessageDefaultTypeInternal {
  constexpr BucketSetMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BucketSetMessageDefaultTypeInternal() {}
  union {
    BucketSetMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BucketSetMessageDefaultTypeInternal _BucketSetMessage_default_instance_;
constexpr InsertMessage::InsertMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , table_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InsertMessageDefaultTypeInternal {
  constexpr InsertMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertMessageDefaultTypeInternal() {}
  union {
    InsertMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertMessageDefaultTypeInternal _InsertMessage_default_instance_;
constexpr SelectMessage::SelectMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_()
  , table_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , document_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SelectMessageDefaultTypeInternal {
  constexpr SelectMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectMessageDefaultTypeInternal() {}
  union {
    SelectMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectMessageDefaultTypeInternal _SelectMessage_default_instance_;
constexpr SelectResult::SelectResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_set_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SelectResultDefaultTypeInternal {
  constexpr SelectResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectResultDefaultTypeInternal() {}
  union {
    SelectResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectResultDefaultTypeInternal _SelectResult_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_seal_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_seal_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_seal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_seal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetupMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetupMessage, connection_information_),
  PROTOBUF_FIELD_OFFSET(::SetupMessage, table_name_),
  PROTOBUF_FIELD_OFFSET(::SetupMessage, column_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BucketReadMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BucketReadMessage, is_odict_),
  PROTOBUF_FIELD_OFFSET(::BucketReadMessage, position_),
  PROTOBUF_FIELD_OFFSET(::BucketReadMessage, oram_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BucketReadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BucketReadResponse, buffer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BucketWriteMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BucketWriteMessage, is_odict_),
  PROTOBUF_FIELD_OFFSET(::BucketWriteMessage, position_),
  PROTOBUF_FIELD_OFFSET(::BucketWriteMessage, buffer_),
  PROTOBUF_FIELD_OFFSET(::BucketWriteMessage, oram_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BucketSetMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BucketSetMessage, is_odict_),
  PROTOBUF_FIELD_OFFSET(::BucketSetMessage, number_of_buckets_),
  PROTOBUF_FIELD_OFFSET(::BucketSetMessage, oram_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InsertMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InsertMessage, table_),
  PROTOBUF_FIELD_OFFSET(::InsertMessage, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SelectMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SelectMessage, table_),
  PROTOBUF_FIELD_OFFSET(::SelectMessage, columns_),
  PROTOBUF_FIELD_OFFSET(::SelectMessage, document_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SelectResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SelectResult, result_set_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SetupMessage)},
  { 8, -1, sizeof(::BucketReadMessage)},
  { 16, -1, sizeof(::BucketReadResponse)},
  { 22, -1, sizeof(::BucketWriteMessage)},
  { 31, -1, sizeof(::BucketSetMessage)},
  { 39, -1, sizeof(::InsertMessage)},
  { 46, -1, sizeof(::SelectMessage)},
  { 54, -1, sizeof(::SelectResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetupMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BucketReadMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BucketReadResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BucketWriteMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BucketSetMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_InsertMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SelectMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SelectResult_default_instance_),
};

const char descriptor_table_protodef_seal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nseal.proto\032\033google/protobuf/empty.prot"
  "o\"X\n\014SetupMessage\022\036\n\026connection_informat"
  "ion\030\001 \001(\014\022\022\n\ntable_name\030\002 \001(\014\022\024\n\014column_"
  "names\030\003 \003(\014\"H\n\021BucketReadMessage\022\020\n\010is_o"
  "dict\030\001 \001(\010\022\020\n\010position\030\002 \001(\005\022\017\n\007oram_id\030"
  "\003 \001(\005\"$\n\022BucketReadResponse\022\016\n\006buffer\030\001 "
  "\001(\014\"Y\n\022BucketWriteMessage\022\020\n\010is_odict\030\001 "
  "\001(\010\022\020\n\010position\030\002 \001(\005\022\016\n\006buffer\030\003 \001(\014\022\017\n"
  "\007oram_id\030\004 \001(\005\"P\n\020BucketSetMessage\022\020\n\010is"
  "_odict\030\001 \001(\010\022\031\n\021number_of_buckets\030\002 \001(\005\022"
  "\017\n\007oram_id\030\003 \001(\005\".\n\rInsertMessage\022\r\n\005tab"
  "le\030\001 \001(\014\022\016\n\006values\030\002 \003(\014\"D\n\rSelectMessag"
  "e\022\r\n\005table\030\001 \001(\014\022\017\n\007columns\030\002 \003(\014\022\023\n\013doc"
  "ument_id\030\003 \001(\014\"\"\n\014SelectResult\022\022\n\nresult"
  "_set\030\001 \001(\0142\335\002\n\004Seal\0220\n\005setup\022\r.SetupMess"
  "age\032\026.google.protobuf.Empty\"\000\0228\n\013read_bu"
  "cket\022\022.BucketReadMessage\032\023.BucketReadRes"
  "ponse\"\000\022=\n\014write_bucket\022\023.BucketWriteMes"
  "sage\032\026.google.protobuf.Empty\"\000\022;\n\014set_ca"
  "pacity\022\021.BucketSetMessage\032\026.google.proto"
  "buf.Empty\"\000\022:\n\016insert_handler\022\016.InsertMe"
  "ssage\032\026.google.protobuf.Empty\"\000\0221\n\016selec"
  "t_handler\022\016.SelectMessage\032\r.SelectResult"
  "\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_seal_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_seal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_seal_2eproto = {
  false, false, 930, descriptor_table_protodef_seal_2eproto, "seal.proto", 
  &descriptor_table_seal_2eproto_once, descriptor_table_seal_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_seal_2eproto::offsets,
  file_level_metadata_seal_2eproto, file_level_enum_descriptors_seal_2eproto, file_level_service_descriptors_seal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_seal_2eproto_getter() {
  return &descriptor_table_seal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_seal_2eproto(&descriptor_table_seal_2eproto);

// ===================================================================

class SetupMessage::_Internal {
 public:
};

SetupMessage::SetupMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  column_names_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SetupMessage)
}
SetupMessage::SetupMessage(const SetupMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      column_names_(from.column_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connection_information_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_connection_information().empty()) {
    connection_information_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connection_information(), 
      GetArenaForAllocation());
  }
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SetupMessage)
}

inline void SetupMessage::SharedCtor() {
connection_information_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetupMessage::~SetupMessage() {
  // @@protoc_insertion_point(destructor:SetupMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetupMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  connection_information_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetupMessage::ArenaDtor(void* object) {
  SetupMessage* _this = reinterpret_cast< SetupMessage* >(object);
  (void)_this;
}
void SetupMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetupMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetupMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SetupMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_names_.Clear();
  connection_information_.ClearToEmpty();
  table_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes connection_information = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_connection_information();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes column_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetupMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetupMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes connection_information = 1;
  if (!this->_internal_connection_information().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_connection_information(), target);
  }

  // bytes table_name = 2;
  if (!this->_internal_table_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  // repeated bytes column_names = 3;
  for (int i = 0, n = this->_internal_column_names_size(); i < n; i++) {
    const auto& s = this->_internal_column_names(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetupMessage)
  return target;
}

size_t SetupMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetupMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes column_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_names_.size());
  for (int i = 0, n = column_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      column_names_.Get(i));
  }

  // bytes connection_information = 1;
  if (!this->_internal_connection_information().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_connection_information());
  }

  // bytes table_name = 2;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_table_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetupMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupMessage::GetClassData() const { return &_class_data_; }

void SetupMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetupMessage *>(to)->MergeFrom(
      static_cast<const SetupMessage &>(from));
}


void SetupMessage::MergeFrom(const SetupMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetupMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_names_.MergeFrom(from.column_names_);
  if (!from._internal_connection_information().empty()) {
    _internal_set_connection_information(from._internal_connection_information());
  }
  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupMessage::CopyFrom(const SetupMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetupMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupMessage::IsInitialized() const {
  return true;
}

void SetupMessage::InternalSwap(SetupMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  column_names_.InternalSwap(&other->column_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &connection_information_, GetArenaForAllocation(),
      &other->connection_information_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, GetArenaForAllocation(),
      &other->table_name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_seal_2eproto_getter, &descriptor_table_seal_2eproto_once,
      file_level_metadata_seal_2eproto[0]);
}

// ===================================================================

class BucketReadMessage::_Internal {
 public:
};

BucketReadMessage::BucketReadMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:BucketReadMessage)
}
BucketReadMessage::BucketReadMessage(const BucketReadMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_odict_, &from.is_odict_,
    static_cast<size_t>(reinterpret_cast<char*>(&oram_id_) -
    reinterpret_cast<char*>(&is_odict_)) + sizeof(oram_id_));
  // @@protoc_insertion_point(copy_constructor:BucketReadMessage)
}

inline void BucketReadMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_odict_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oram_id_) -
    reinterpret_cast<char*>(&is_odict_)) + sizeof(oram_id_));
}

BucketReadMessage::~BucketReadMessage() {
  // @@protoc_insertion_point(destructor:BucketReadMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BucketReadMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BucketReadMessage::ArenaDtor(void* object) {
  BucketReadMessage* _this = reinterpret_cast< BucketReadMessage* >(object);
  (void)_this;
}
void BucketReadMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BucketReadMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BucketReadMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:BucketReadMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_odict_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oram_id_) -
      reinterpret_cast<char*>(&is_odict_)) + sizeof(oram_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BucketReadMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_odict = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_odict_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 oram_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          oram_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BucketReadMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BucketReadMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_odict = 1;
  if (this->_internal_is_odict() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_odict(), target);
  }

  // int32 position = 2;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_position(), target);
  }

  // int32 oram_id = 3;
  if (this->_internal_oram_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_oram_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BucketReadMessage)
  return target;
}

size_t BucketReadMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BucketReadMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_odict = 1;
  if (this->_internal_is_odict() != 0) {
    total_size += 1 + 1;
  }

  // int32 position = 2;
  if (this->_internal_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_position());
  }

  // int32 oram_id = 3;
  if (this->_internal_oram_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oram_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BucketReadMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BucketReadMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BucketReadMessage::GetClassData() const { return &_class_data_; }

void BucketReadMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BucketReadMessage *>(to)->MergeFrom(
      static_cast<const BucketReadMessage &>(from));
}


void BucketReadMessage::MergeFrom(const BucketReadMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BucketReadMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_odict() != 0) {
    _internal_set_is_odict(from._internal_is_odict());
  }
  if (from._internal_position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from._internal_oram_id() != 0) {
    _internal_set_oram_id(from._internal_oram_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BucketReadMessage::CopyFrom(const BucketReadMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BucketReadMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketReadMessage::IsInitialized() const {
  return true;
}

void BucketReadMessage::InternalSwap(BucketReadMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BucketReadMessage, oram_id_)
      + sizeof(BucketReadMessage::oram_id_)
      - PROTOBUF_FIELD_OFFSET(BucketReadMessage, is_odict_)>(
          reinterpret_cast<char*>(&is_odict_),
          reinterpret_cast<char*>(&other->is_odict_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BucketReadMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_seal_2eproto_getter, &descriptor_table_seal_2eproto_once,
      file_level_metadata_seal_2eproto[1]);
}

// ===================================================================

class BucketReadResponse::_Internal {
 public:
};

BucketReadResponse::BucketReadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:BucketReadResponse)
}
BucketReadResponse::BucketReadResponse(const BucketReadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buffer().empty()) {
    buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buffer(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:BucketReadResponse)
}

inline void BucketReadResponse::SharedCtor() {
buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BucketReadResponse::~BucketReadResponse() {
  // @@protoc_insertion_point(destructor:BucketReadResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BucketReadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BucketReadResponse::ArenaDtor(void* object) {
  BucketReadResponse* _this = reinterpret_cast< BucketReadResponse* >(object);
  (void)_this;
}
void BucketReadResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BucketReadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BucketReadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BucketReadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BucketReadResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes buffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BucketReadResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BucketReadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes buffer = 1;
  if (!this->_internal_buffer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BucketReadResponse)
  return target;
}

size_t BucketReadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BucketReadResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buffer = 1;
  if (!this->_internal_buffer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buffer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BucketReadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BucketReadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BucketReadResponse::GetClassData() const { return &_class_data_; }

void BucketReadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BucketReadResponse *>(to)->MergeFrom(
      static_cast<const BucketReadResponse &>(from));
}


void BucketReadResponse::MergeFrom(const BucketReadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BucketReadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_buffer().empty()) {
    _internal_set_buffer(from._internal_buffer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BucketReadResponse::CopyFrom(const BucketReadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BucketReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketReadResponse::IsInitialized() const {
  return true;
}

void BucketReadResponse::InternalSwap(BucketReadResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buffer_, GetArenaForAllocation(),
      &other->buffer_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BucketReadResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_seal_2eproto_getter, &descriptor_table_seal_2eproto_once,
      file_level_metadata_seal_2eproto[2]);
}

// ===================================================================

class BucketWriteMessage::_Internal {
 public:
};

BucketWriteMessage::BucketWriteMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:BucketWriteMessage)
}
BucketWriteMessage::BucketWriteMessage(const BucketWriteMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buffer().empty()) {
    buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buffer(), 
      GetArenaForAllocation());
  }
  ::memcpy(&is_odict_, &from.is_odict_,
    static_cast<size_t>(reinterpret_cast<char*>(&oram_id_) -
    reinterpret_cast<char*>(&is_odict_)) + sizeof(oram_id_));
  // @@protoc_insertion_point(copy_constructor:BucketWriteMessage)
}

inline void BucketWriteMessage::SharedCtor() {
buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_odict_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oram_id_) -
    reinterpret_cast<char*>(&is_odict_)) + sizeof(oram_id_));
}

BucketWriteMessage::~BucketWriteMessage() {
  // @@protoc_insertion_point(destructor:BucketWriteMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BucketWriteMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BucketWriteMessage::ArenaDtor(void* object) {
  BucketWriteMessage* _this = reinterpret_cast< BucketWriteMessage* >(object);
  (void)_this;
}
void BucketWriteMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BucketWriteMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BucketWriteMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:BucketWriteMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_.ClearToEmpty();
  ::memset(&is_odict_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oram_id_) -
      reinterpret_cast<char*>(&is_odict_)) + sizeof(oram_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BucketWriteMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_odict = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_odict_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes buffer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 oram_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          oram_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BucketWriteMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BucketWriteMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_odict = 1;
  if (this->_internal_is_odict() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_odict(), target);
  }

  // int32 position = 2;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_position(), target);
  }

  // bytes buffer = 3;
  if (!this->_internal_buffer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_buffer(), target);
  }

  // int32 oram_id = 4;
  if (this->_internal_oram_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_oram_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BucketWriteMessage)
  return target;
}

size_t BucketWriteMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BucketWriteMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buffer = 3;
  if (!this->_internal_buffer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buffer());
  }

  // bool is_odict = 1;
  if (this->_internal_is_odict() != 0) {
    total_size += 1 + 1;
  }

  // int32 position = 2;
  if (this->_internal_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_position());
  }

  // int32 oram_id = 4;
  if (this->_internal_oram_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oram_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BucketWriteMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BucketWriteMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BucketWriteMessage::GetClassData() const { return &_class_data_; }

void BucketWriteMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BucketWriteMessage *>(to)->MergeFrom(
      static_cast<const BucketWriteMessage &>(from));
}


void BucketWriteMessage::MergeFrom(const BucketWriteMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BucketWriteMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_buffer().empty()) {
    _internal_set_buffer(from._internal_buffer());
  }
  if (from._internal_is_odict() != 0) {
    _internal_set_is_odict(from._internal_is_odict());
  }
  if (from._internal_position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from._internal_oram_id() != 0) {
    _internal_set_oram_id(from._internal_oram_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BucketWriteMessage::CopyFrom(const BucketWriteMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BucketWriteMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketWriteMessage::IsInitialized() const {
  return true;
}

void BucketWriteMessage::InternalSwap(BucketWriteMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buffer_, GetArenaForAllocation(),
      &other->buffer_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BucketWriteMessage, oram_id_)
      + sizeof(BucketWriteMessage::oram_id_)
      - PROTOBUF_FIELD_OFFSET(BucketWriteMessage, is_odict_)>(
          reinterpret_cast<char*>(&is_odict_),
          reinterpret_cast<char*>(&other->is_odict_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BucketWriteMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_seal_2eproto_getter, &descriptor_table_seal_2eproto_once,
      file_level_metadata_seal_2eproto[3]);
}

// ===================================================================

class BucketSetMessage::_Internal {
 public:
};

BucketSetMessage::BucketSetMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:BucketSetMessage)
}
BucketSetMessage::BucketSetMessage(const BucketSetMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_odict_, &from.is_odict_,
    static_cast<size_t>(reinterpret_cast<char*>(&oram_id_) -
    reinterpret_cast<char*>(&is_odict_)) + sizeof(oram_id_));
  // @@protoc_insertion_point(copy_constructor:BucketSetMessage)
}

inline void BucketSetMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_odict_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oram_id_) -
    reinterpret_cast<char*>(&is_odict_)) + sizeof(oram_id_));
}

BucketSetMessage::~BucketSetMessage() {
  // @@protoc_insertion_point(destructor:BucketSetMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BucketSetMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BucketSetMessage::ArenaDtor(void* object) {
  BucketSetMessage* _this = reinterpret_cast< BucketSetMessage* >(object);
  (void)_this;
}
void BucketSetMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BucketSetMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BucketSetMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:BucketSetMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_odict_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oram_id_) -
      reinterpret_cast<char*>(&is_odict_)) + sizeof(oram_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BucketSetMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_odict = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_odict_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 number_of_buckets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_of_buckets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 oram_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          oram_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BucketSetMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BucketSetMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_odict = 1;
  if (this->_internal_is_odict() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_odict(), target);
  }

  // int32 number_of_buckets = 2;
  if (this->_internal_number_of_buckets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_number_of_buckets(), target);
  }

  // int32 oram_id = 3;
  if (this->_internal_oram_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_oram_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BucketSetMessage)
  return target;
}

size_t BucketSetMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BucketSetMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_odict = 1;
  if (this->_internal_is_odict() != 0) {
    total_size += 1 + 1;
  }

  // int32 number_of_buckets = 2;
  if (this->_internal_number_of_buckets() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_of_buckets());
  }

  // int32 oram_id = 3;
  if (this->_internal_oram_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oram_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BucketSetMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BucketSetMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BucketSetMessage::GetClassData() const { return &_class_data_; }

void BucketSetMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BucketSetMessage *>(to)->MergeFrom(
      static_cast<const BucketSetMessage &>(from));
}


void BucketSetMessage::MergeFrom(const BucketSetMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BucketSetMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_odict() != 0) {
    _internal_set_is_odict(from._internal_is_odict());
  }
  if (from._internal_number_of_buckets() != 0) {
    _internal_set_number_of_buckets(from._internal_number_of_buckets());
  }
  if (from._internal_oram_id() != 0) {
    _internal_set_oram_id(from._internal_oram_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BucketSetMessage::CopyFrom(const BucketSetMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BucketSetMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketSetMessage::IsInitialized() const {
  return true;
}

void BucketSetMessage::InternalSwap(BucketSetMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BucketSetMessage, oram_id_)
      + sizeof(BucketSetMessage::oram_id_)
      - PROTOBUF_FIELD_OFFSET(BucketSetMessage, is_odict_)>(
          reinterpret_cast<char*>(&is_odict_),
          reinterpret_cast<char*>(&other->is_odict_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BucketSetMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_seal_2eproto_getter, &descriptor_table_seal_2eproto_once,
      file_level_metadata_seal_2eproto[4]);
}

// ===================================================================

class InsertMessage::_Internal {
 public:
};

InsertMessage::InsertMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:InsertMessage)
}
InsertMessage::InsertMessage(const InsertMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table().empty()) {
    table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:InsertMessage)
}

inline void InsertMessage::SharedCtor() {
table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InsertMessage::~InsertMessage() {
  // @@protoc_insertion_point(destructor:InsertMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InsertMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InsertMessage::ArenaDtor(void* object) {
  InsertMessage* _this = reinterpret_cast< InsertMessage* >(object);
  (void)_this;
}
void InsertMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:InsertMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  table_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InsertMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes table = 1;
  if (!this->_internal_table().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_table(), target);
  }

  // repeated bytes values = 2;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InsertMessage)
  return target;
}

size_t InsertMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InsertMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes values = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
  for (int i = 0, n = values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      values_.Get(i));
  }

  // bytes table = 1;
  if (!this->_internal_table().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_table());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InsertMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertMessage::GetClassData() const { return &_class_data_; }

void InsertMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InsertMessage *>(to)->MergeFrom(
      static_cast<const InsertMessage &>(from));
}


void InsertMessage::MergeFrom(const InsertMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InsertMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (!from._internal_table().empty()) {
    _internal_set_table(from._internal_table());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertMessage::CopyFrom(const InsertMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InsertMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertMessage::IsInitialized() const {
  return true;
}

void InsertMessage::InternalSwap(InsertMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_, GetArenaForAllocation(),
      &other->table_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_seal_2eproto_getter, &descriptor_table_seal_2eproto_once,
      file_level_metadata_seal_2eproto[5]);
}

// ===================================================================

class SelectMessage::_Internal {
 public:
};

SelectMessage::SelectMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  columns_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SelectMessage)
}
SelectMessage::SelectMessage(const SelectMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table().empty()) {
    table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table(), 
      GetArenaForAllocation());
  }
  document_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_document_id().empty()) {
    document_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_document_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SelectMessage)
}

inline void SelectMessage::SharedCtor() {
table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
document_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SelectMessage::~SelectMessage() {
  // @@protoc_insertion_point(destructor:SelectMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  document_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SelectMessage::ArenaDtor(void* object) {
  SelectMessage* _this = reinterpret_cast< SelectMessage* >(object);
  (void)_this;
}
void SelectMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SelectMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  table_.ClearToEmpty();
  document_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes document_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_document_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SelectMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes table = 1;
  if (!this->_internal_table().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_table(), target);
  }

  // repeated bytes columns = 2;
  for (int i = 0, n = this->_internal_columns_size(); i < n; i++) {
    const auto& s = this->_internal_columns(i);
    target = stream->WriteBytes(2, s, target);
  }

  // bytes document_id = 3;
  if (!this->_internal_document_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_document_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SelectMessage)
  return target;
}

size_t SelectMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SelectMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes columns = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(columns_.size());
  for (int i = 0, n = columns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      columns_.Get(i));
  }

  // bytes table = 1;
  if (!this->_internal_table().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_table());
  }

  // bytes document_id = 3;
  if (!this->_internal_document_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_document_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectMessage::GetClassData() const { return &_class_data_; }

void SelectMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SelectMessage *>(to)->MergeFrom(
      static_cast<const SelectMessage &>(from));
}


void SelectMessage::MergeFrom(const SelectMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SelectMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (!from._internal_table().empty()) {
    _internal_set_table(from._internal_table());
  }
  if (!from._internal_document_id().empty()) {
    _internal_set_document_id(from._internal_document_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectMessage::CopyFrom(const SelectMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SelectMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectMessage::IsInitialized() const {
  return true;
}

void SelectMessage::InternalSwap(SelectMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  columns_.InternalSwap(&other->columns_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_, GetArenaForAllocation(),
      &other->table_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &document_id_, GetArenaForAllocation(),
      &other->document_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_seal_2eproto_getter, &descriptor_table_seal_2eproto_once,
      file_level_metadata_seal_2eproto[6]);
}

// ===================================================================

class SelectResult::_Internal {
 public:
};

SelectResult::SelectResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SelectResult)
}
SelectResult::SelectResult(const SelectResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_set_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_set().empty()) {
    result_set_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result_set(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SelectResult)
}

inline void SelectResult::SharedCtor() {
result_set_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SelectResult::~SelectResult() {
  // @@protoc_insertion_point(destructor:SelectResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_set_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SelectResult::ArenaDtor(void* object) {
  SelectResult* _this = reinterpret_cast< SelectResult* >(object);
  (void)_this;
}
void SelectResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectResult::Clear() {
// @@protoc_insertion_point(message_clear_start:SelectResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_set_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes result_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_result_set();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SelectResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes result_set = 1;
  if (!this->_internal_result_set().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_result_set(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SelectResult)
  return target;
}

size_t SelectResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SelectResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes result_set = 1;
  if (!this->_internal_result_set().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result_set());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectResult::GetClassData() const { return &_class_data_; }

void SelectResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SelectResult *>(to)->MergeFrom(
      static_cast<const SelectResult &>(from));
}


void SelectResult::MergeFrom(const SelectResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SelectResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_set().empty()) {
    _internal_set_result_set(from._internal_result_set());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectResult::CopyFrom(const SelectResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SelectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectResult::IsInitialized() const {
  return true;
}

void SelectResult::InternalSwap(SelectResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_set_, GetArenaForAllocation(),
      &other->result_set_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_seal_2eproto_getter, &descriptor_table_seal_2eproto_once,
      file_level_metadata_seal_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SetupMessage* Arena::CreateMaybeMessage< ::SetupMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetupMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::BucketReadMessage* Arena::CreateMaybeMessage< ::BucketReadMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BucketReadMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::BucketReadResponse* Arena::CreateMaybeMessage< ::BucketReadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BucketReadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::BucketWriteMessage* Arena::CreateMaybeMessage< ::BucketWriteMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BucketWriteMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::BucketSetMessage* Arena::CreateMaybeMessage< ::BucketSetMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BucketSetMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::InsertMessage* Arena::CreateMaybeMessage< ::InsertMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InsertMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::SelectMessage* Arena::CreateMaybeMessage< ::SelectMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SelectMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::SelectResult* Arena::CreateMaybeMessage< ::SelectResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SelectResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
