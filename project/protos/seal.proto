syntax = "proto3";

import "google/protobuf/empty.proto";

service Seal {
    // Setup the remote database by the database name, username, password.
    rpc setup (SetupMessage) returns (google.protobuf.Empty) {}

    // Read a bucket from the ORAM pool.
    rpc read_bucket(BucketReadMessage) returns (BucketReadResponse) {}

    // Write a bucket to the ORAM pool.
    rpc write_bucket(BucketWriteMessage) returns (google.protobuf.Empty) {}

    // When an ORAM access controller is initialized, the capacity of the bucket is set.
    rpc set_capacity(BucketSetMessage) returns (google.protobuf.Empty) {}

    // Handles communication with the relational database.
    rpc insert_handler(InsertMessage) returns (google.protobuf.Empty) {}

    rpc select_handler(SelectMessage) returns (SelectResult) {}
}

message SetupMessage
{
    bytes connection_information = 1;
    bytes table_name = 2;
    repeated bytes column_names = 3;
}

message BucketReadMessage
{
    bool is_odict = 1;
    int32 position = 2;
    int32 oram_id = 3;
    bytes map_key = 4;
}

message BucketReadResponse
{
    bytes buffer = 1;
}

message BucketWriteMessage
{
    bool is_odict = 1;
    int32 position = 2;
    bytes buffer = 3;
    int32 oram_id = 4;
    bytes map_key = 5;
}

message BucketSetMessage
{
    bool is_odict = 1;
    int32 number_of_buckets = 2;
    int32 oram_id = 3;
    bytes map_key = 4;
}

message InsertMessage
{
    bytes table = 1;
    // Only supports one packed value at a time.
    repeated bytes values = 2;
}

// SELECT `<columns>`` FROM `table` WHERE `document_id` = <document_id>
message SelectMessage
{
    bytes table = 1;
    repeated bytes columns = 2;
    bytes document_id = 3;
}

// Resultset is serialized via Cereal libarary.
message SelectResult
{
    bytes result_set = 1;
}